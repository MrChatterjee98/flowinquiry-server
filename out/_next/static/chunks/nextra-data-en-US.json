{"/about":{"title":"About","data":{"credits#Credits":"Flexwork is powered by these incredible open source projects:\nSpring framework\nHibernate\nLiquibase\nNextJS\nTailwindCSS\nShadcn\nDocker\nPostgreSQL\nPulumi\nAnd many more\nIt pays tribute to JHispter, as the original code was generated by this fantastic platform","license#License":"All Flexwork source codes are licensed under AGPL v3"}},"/developer_guides/deployment":{"title":"Deployment","data":{"":"TBD"}},"/developer_guides/front_end":{"title":"Front-end","data":{"":"Flexwork front-end uses NextJs framework to develop its UI.","get-the-latest-sources-from-github#Get the latest sources from GitHub":"Access the latest source code for Flexwork's front-end at https://github.com/theflexwork/flexwork-frontend","development#Development":"","folders-organization#Folders organization":"public contains static assets, such as files and images, served by Next.js\nscripts Includes useful scripts for validating environment settings, setting up project environment variables, and more\nsrc the Flexwork's frontend source code","checking-environments#Checking environments":"Flexwork's front-end requires Node and pnpm to be installed on your machine. You can run the valid_checks.sh script located in the scripts folder to verify if your machine is set up to work with Flexwork","setup-scripts#Setup scripts":"You will need to run the following scripts:\nscripts/init_git_hooks.sh: Sets up a git hook to automatically format and check code logic each time you commit changes.\nscripts/init_environments.sh: Create a new .env.local file, which is used by the Next.js application to read predefined environment variables\nYou can run the scripts/all.sh script, which will check your environment settings and perform the necessary configurations, eliminating the need to run multiple scripts individually","run-in-dev-mode#Run in dev mode":"Open the terminal and run the command\nit will launch the process to start the Flexwork front-end at the default port 3000"}},"/developer_guides/how_to_contributes":{"title":"Contribution Welcome","data":{"":"We warmly welcome contributions to this project! Whether you want to report bugs, share ideas, fix issues, or develop new features, your input is highly valued. By participating, you help us improve the project and make it more useful for everyone. Contributions can take many forms, from submitting bug reports and proposing enhancements to writing code or improving documentation. Feel free to explore the project, and donâ€™t hesitate to get involved. Together, we can make this project even better!"}},"/user_guides/installation":{"title":"Installations","data":{"":"TBD"}},"/developer_guides/back_end":{"title":"Back-end","data":{"":"Flexwork back-end is a spring boot application, and it has several components:\nSpring Data\nSpring REST\nSpring Security\nSpring State Machine\nLiquibase\nFlexwork uses Gradle as its build tool and includes the Gradle wrapper in the distribution, so there's no need to install Gradle separately.","get-the-latest-sources-from-github#Get the latest sources from GitHub":"Access the latest source code for Flexwork's back-end at https://github.com/theflexwork/flexwork-server","development#Development":"","folders-organization#Folders organization":"scripts Includes useful scripts for validating environment settings, setting up project environment variables, and more","checking-environments#Checking environments":"Flexwork backend requires Java, Docker is already installed. You can run the valid_checks.sh script located in the scripts folder to verify\nif your machine is set up to work with Flexwork","setup-scripts#Setup scripts":"You will need to run the following scripts:scripts/init_git_hooks.sh: Sets up a git hook to automatically format and check code logic each time you commit changes.scripts/init_environments.sh: Create a new .env.local file, which is used by the Flexwork server\nYou can run the scripts/all.sh script, which will check your environment settings and perform the necessary configurations, eliminating the need to run multiple scripts individually","run-application#Run application":"","run-postgres-database#Run postgres database":"Flexwork uses PostgreSQL as its database and provides pre-configured PostgreSQL settings. You need to run the database before starting the Flexwork server.\nEnsure that Docker is installed on your machine, then run the command docker compose -f docker/services.yml up to start the database\nBe sure to run the scripts/all.sh or scripts/create_secrets.sh script before starting the PostgreSQL database, as they will generate a new\nPostgreSQL password and store it in the .env.local file, which the PostgreSQL container relies on.","run-flexwork-server#Run flexwork server":"From the root folder, run the command ./gradlew :server:bootRun\nIt may take some time before the server APIs are accessible on the default port 8080\nYou can import the Flexwork server into IntelliJ as a Gradle project. Once imported, run the io.flexwork.FlexworkApp class as a standalone Java applicationAs similar than gradle command, it will take some time before the server APIs are accessible on the default port 8080"}},"/developer_guides":{"title":"Developer guides","data":{"":"Flexwork is an application consisting of two components: a front-end and a back-end. Each component can be hosted on a separate service. To run the Flexwork application, both the front-end and back-end must be deployed properly.The developer guidelines provide foundational knowledge for those contributing to the Flexwork codebase. If you encounter issues with the Flexwork codebase and the documentation doesn't resolve them, feel free to raise an issue in our GitHub repository.Flexwork's source code, primarily written in Java, TypeScript, and Python, is platform-independent. However, some scripts are written in Bash and are supported in Bash-enabled environments such as macOS and Linux. If you're using Windows, please enable Bash support by using one of the following options:\nWindows Subsystem for Linux (WSL)\nCygwin\nLinux Virtual Machine\nWe do not provide support for Windows-specific issues or any additional tools that are not used by our development team","development-tools#Development tools":"We strive to use the best tools to enhance our team's productivity. Below are the tools we use in our development process\nDocker: We use Docker to run external components like the PostgreSQL database and to build Docker images for Flexwork's front-end and back-end\nVisual Studio Code: Most of our developers use Visual Studio Code for working with TypeScript, Node.js, and any tasks related to scripts or text files.Intellij Ultimate: A few developers on our team find they are more productive using IntelliJ IDEA for Next.js/React projects. While comparing Visual Studio Code to IntelliJ IDEA isn't entirely fair, we've found that refactoring front-end code is significantly more efficient with IntelliJ Ultimate.\nIntellij: you could develop the Flexwork back-end by using IntelliJ Community or IntelliJ Ultimate."}},"/":{"title":"Welcome to Flexwork docs","data":{"":"Hello, world!"}}}